defmodule Automatas2Test do
  use ExUnit.Case
  doctest Automatas2

  test "example 1" do
    automata1 = {[0,1,2,3], ['a', 'b'],
    [
      {0, 'a', 1},
      {0, 'a', 0},
      {0, 'b', 0},
      {1, 'b', 2},
      {2, 'b', 3}
    ],
    0, [3]
    }

    automataR = {[
      [],
      [0],
      [1],
      [2],
      [3],
      [0, 1],
      [0, 2],
      [0, 3],
      [1, 2],
      [1, 3],
      [2, 3],
      [0, 1, 2],
      [0, 1, 3],
      [0, 2, 3],
      [1, 2, 3],
      [0, 1, 2, 3]
    ], ['a', 'b'],
    [
      {[], 'a', []},
      {[], 'b', []},
      {[0], 'a', [0, 1]},
      {[0], 'b', [0]},
      {[1], 'a', []},
      {[1], 'b', [2]},
      {[2], 'a', []},
      {[2], 'b', [3]},
      {[3], 'a', []},
      {[3], 'b', []},
      {[0, 1], 'a', [0, 1]},
      {[0, 1], 'b', [0, 2]},
      {[0, 2], 'a', [0, 1]},
      {[0, 2], 'b', [0, 3]},
      {[0, 3], 'a', [0, 1]},
      {[0, 3], 'b', [0]},
      {[1, 2], 'a', []},
      {[1, 2], 'b', [2, 3]},
      {[1, 3], 'a', []},
      {[1, 3], 'b', [2]},
      {[2, 3], 'a', []},
      {[2, 3], 'b', [3]},
      {[0, 1, 2], 'a', [0, 1]},
      {[0, 1, 2], 'b', [0, 2, 3]},
      {[0, 1, 3], 'a', [0, 1]},
      {[0, 1, 3], 'b', [0, 2]},
      {[0, 2, 3], 'a', [0, 1]},
      {[0, 2, 3], 'b', [0, 3]},
      {[1, 2, 3], 'a', []},
      {[1, 2, 3], 'b', [2, 3]},
      {[0, 1, 2, 3], 'a', [0, 1]},
      {[0, 1, 2, 3], 'b', [0, 2, 3]}
    ], [0],
    [[3], [0, 3], [1, 3], [2, 3], [0, 1, 3], [0, 2, 3], [1, 2, 3], [0, 1, 2, 3]]}

    assert Automatas2.determinize(automata1) == automataR
  end

  test "example 2" do
    automata = {[
      [],
      [0],
      [1],
      [2],
      [3],
      [0, 1],
      [0, 2],
      [0, 3],
      [1, 2],
      [1, 3],
      [2, 3],
      [0, 1, 2],
      [0, 1, 3],
      [0, 2, 3],
      [1, 2, 3],
      [0, 1, 2, 3]
    ], ['a', 'b'],
    [
      {[], 'a', []},
      {[], 'b', []},
      {[0], 'a', [0, 1]},
      {[0], 'b', [0]},
      {[1], 'a', []},
      {[1], 'b', [2]},
      {[2], 'a', []},
      {[2], 'b', [3]},
      {[3], 'a', []},
      {[3], 'b', []},
      {[0, 1], 'a', [0, 1]},
      {[0, 1], 'b', [0, 2]},
      {[0, 2], 'a', [0, 1]},
      {[0, 2], 'b', [0, 3]},
      {[0, 3], 'a', [0, 1]},
      {[0, 3], 'b', [0]},
      {[1, 2], 'a', []},
      {[1, 2], 'b', [2, 3]},
      {[1, 3], 'a', []},
      {[1, 3], 'b', [2]},
      {[2, 3], 'a', []},
      {[2, 3], 'b', [3]},
      {[0, 1, 2], 'a', [0, 1]},
      {[0, 1, 2], 'b', [0, 2, 3]},
      {[0, 1, 3], 'a', [0, 1]},
      {[0, 1, 3], 'b', [0, 2]},
      {[0, 2, 3], 'a', [0, 1]},
      {[0, 2, 3], 'b', [0, 3]},
      {[1, 2, 3], 'a', []},
      {[1, 2, 3], 'b', [2, 3]},
      {[0, 1, 2, 3], 'a', [0, 1]},
      {[0, 1, 2, 3], 'b', [0, 2, 3]}
    ], [0],
    [[3], [0, 3], [1, 3], [2, 3], [0, 1, 3], [0, 2, 3], [1, 2, 3], [0, 1, 2, 3]]}

    automataR = {[[0], [0, 1], [0, 2], [0, 3]], ['a', 'b'],
    [
      {[0], 'a', [0, 1]},
      {[0, 1], 'a', [0, 1]},
      {[0, 1], 'b', [0, 2]},
      {[0, 2], 'a', [0, 1]},
      {[0, 2], 'b', [0, 3]},
      {[0, 3], 'a', [0, 1]},
      {[0, 3], 'b', [0]},
      {[0], 'b', [0]}
    ], [0], [[0, 3]]}

    assert Automatas2.prune(automata) == automataR
  end

  test "example 3" do
    automata = {[0,1,2,3,4,5,6,7,8,9,10], ['a', 'b', ''],
    [
      {0, '', 1},
      {0, '', 7},
      {1, '', 2},
      {1, '', 3},
      {2, 'a', 4},
      {3, 'b', 5},
      {4, '', 6},
      {5, '', 6},
      {6, '', 1},
      {6, '', 7},
      {7, 'a', 8},
      {8, 'b', 9},
      {9, 'b', 10}
    ],
    0, [3]
    }

    assert Automatas2.e_closure(automata, [0,1]) == [0,1,2,3,7]
  end

  test "Example 4" do
    automata = {[0,1,2,3,4,5,6,7,8,9,10], ['a', 'b', ''],
    [
      {0, '', 1},
      {0, '', 7},
      {1, '', 2},
      {1, '', 3},
      {2, 'a', 4},
      {3, 'b', 5},
      {4, '', 6},
      {5, '', 6},
      {6, '', 1},
      {6, '', 7},
      {7, 'a', 8},
      {8, 'b', 9},
      {9, 'b', 10}
    ],
    0, [3]
    }

    expected = :ok

    assert Automatas2.e_determinize(automata) == expected
  end
end
