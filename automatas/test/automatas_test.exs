defmodule AutomatasTest do
  use ExUnit.Case
  doctest Automatas

  test "cross" do
    l1 = [1,2,3]
    l2 = [8,9]
    assert {2,9} in Automatas.cross(l1,l2)
  end

  test "delta" do
    qp = [0,1]
    qq = [0,1]
    s = ['a','b']
    mp = %{
      {0,'a'} => 1,
      {0,'b'} => 2,
      {1,'a'} => 1,
      {1,'b'} => 3,
    }
    mq = %{
      {0,'a'} => 2,
      {0,'b'} => 1,
      {1,'a'} => 3,
      {1,'b'} => 1,
    }

    d = %{
      {0,0,'a'} => {1,2},
      {0,0,'b'} => {2,1},
      {0,1,'a'} => {1,3},
      {0,1,'b'} => {2,1},
      {1,0,'a'} => {1,2},
      {1,0,'b'} => {3,1},
      {1,1,'a'} => {1,3},
      {1,1,'b'} => {3,1}
    }

    assert (Automatas.delta({qp, s, mp, 2, 1}, {qq, s, mq, 2, 1}) == d)
  end

  test "final" do
    qp = [0,1]
    qq = [0,1]
    fp = [3]
    fq = [2,3]
    f = [{3,0}, {3,1}, {0,2}, {0,3}, {1,2}, {1,3}]
    assert (Automatas.final({qp, 3, 1, 2, fp}, {qq, 3, 1, 2, fq}) == f)
  end

  test "union" do
    q1 = [0,1,2,3]
    q2 = [0,1,2,3]
    s = ['a','b']
    d1 = %{
      {0,'a'} => 1,
      {0,'b'} => 2,
      {1,'a'} => 1,
      {1,'b'} => 3,
      {2,'a'} => 2,
      {2,'b'} => 2,
      {3,'a'} => 1,
      {3,'b'} => 3
    }

    d2 = %{
      {0,'a'} => 2,
      {0,'b'} => 1,
      {1,'a'} => 3,
      {1,'b'} => 1,
      {2,'a'} => 2,
      {2,'b'} => 2,
      {3,'a'} => 3,
      {3,'b'} => 1
    }

    q01 = 0
    q02 = 0
    f1 = [3]
    f2 = [3]

    eq = [{0,0}, {0,1}, {0,2}, {0,3}, {1,0}, {1,1}, {1,2}, {1,3}, {2,0}, {2,1}, {2,2}, {2,3}, {3,0}, {3,1}, {3,2}, {3,3}]
    es = ['a', 'b']
    ed = %{
      {0,0,'a'} => {1,2},
      {0,0,'b'} => {2,1},
      {0,1,'a'} => {1,3},
      {0,1,'b'} => {2,1},
      {0,2,'a'} => {1,2},
      {0,2,'b'} => {2,2},
      {0,3,'a'} => {1,3},
      {0,3,'b'} => {2,1},
      {1,0,'a'} => {1,2},
      {1,0,'b'} => {3,1},
      {1,1,'a'} => {1,3},
      {1,1,'b'} => {3,1},
      {1,2,'a'} => {1,2},
      {1,2,'b'} => {3,2},
      {1,3,'a'} => {1,3},
      {1,3,'b'} => {3,1},
      {2,0,'a'} => {2,2},
      {2,0,'b'} => {2,1},
      {2,1,'a'} => {2,3},
      {2,1,'b'} => {2,1},
      {2,2,'a'} => {2,2},
      {2,2,'b'} => {2,2},
      {2,3,'a'} => {2,3},
      {2,3,'b'} => {2,1},
      {3,0,'a'} => {1,2},
      {3,0,'b'} => {3,1},
      {3,1,'a'} => {1,3},
      {3,1,'b'} => {3,1},
      {3,2,'a'} => {1,2},
      {3,2,'b'} => {3,2},
      {3,3,'a'} => {1,3},
      {3,3,'b'} => {3,1}
    }
    eq0 = {0,0}
    ef = [{3,0}, {3,1}, {3,2}, {3,3}, {0,3}, {1,3}, {2,3}]
    assert (Automatas.union({q1,s,d1,q01,f1},{q2,s,d2,q02,f2}) == {eq, es, ed, eq0, ef})
  end

  test "prune" do
    q = [{0,0}, {0,1}, {0,2}, {0,3}, {1,0}, {1,1}, {1,2}, {1,3}, {2,0}, {2,1}, {2,2}, {2,3}, {3,0}, {3,1}, {3,2}, {3,3}]
    s = ['a','b']
    d = %{
      {0,0,'a'} => {1,2},
      {0,0,'b'} => {2,1},
      {0,1,'a'} => {1,3},
      {0,1,'b'} => {2,1},
      {0,2,'a'} => {1,2},
      {0,2,'b'} => {2,2},
      {0,3,'a'} => {1,3},
      {0,3,'b'} => {2,1},
      {1,0,'a'} => {1,2},
      {1,0,'b'} => {3,1},
      {1,1,'a'} => {1,3},
      {1,1,'b'} => {3,1},
      {1,2,'a'} => {1,2},
      {1,2,'b'} => {3,2},
      {1,3,'a'} => {1,3},
      {1,3,'b'} => {3,1},
      {2,0,'a'} => {2,2},
      {2,0,'b'} => {2,1},
      {2,1,'a'} => {2,3},
      {2,1,'b'} => {2,1},
      {2,2,'a'} => {2,2},
      {2,2,'b'} => {2,2},
      {2,3,'a'} => {2,3},
      {2,3,'b'} => {2,1},
      {3,0,'a'} => {1,2},
      {3,0,'b'} => {3,1},
      {3,1,'a'} => {1,3},
      {3,1,'b'} => {3,1},
      {3,2,'a'} => {1,2},
      {3,2,'b'} => {3,2},
      {3,3,'a'} => {1,3},
      {3,3,'b'} => {3,1}
    }
    q0 = {0,0}
    f = [{3,0}, {3,1}, {3,2}, {3,3}, {0,3}, {1,3}, {2,3}]
    expected = {[{0, 0}, {1, 2}, {2, 1}, {2, 3}, {3, 2}], ['a', 'b'],
    %{
      {0, 0, 'a'} => {1, 2},
      {0, 0, 'b'} => {2, 1},
      {1, 2, 'a'} => {1, 2},
      {1, 2, 'b'} => {3, 2},
      {2, 1, 'a'} => {2, 3},
      {2, 1, 'b'} => {2, 1},
      {2, 3, 'a'} => {2, 3},
      {2, 3, 'b'} => {2, 1},
      {3, 2, 'a'} => {1, 2},
      {3, 2, 'b'} => {3, 2}
    }, {0, 0}, [{3, 2}, {2, 3}]}
    assert (Automatas.prune({q,s,d,q0,f}) == expected)
  end
end
